#!/bin/bash

# Instalador Automatizado Completo de Servidor
# Instala: Ubuntu/Debian updates, Docker Swarm, Portainer (com senha), N8N, Evolution API
# Uso: ./install_complete_server.sh DOMAIN PORTAINER_SUBDOMAIN N8N_EDITOR_SUBDOMAIN N8N_WEBHOOK_SUBDOMAIN EVOLUTION_SUBDOMAIN WEBHOOK_URL [PORTAINER_PASSWORD]
# Exemplo: ./install_complete_server.sh exemplo.com painel editor webhook api https://webhook.site/uuid minhasenha123

set -e  # Para no primeiro erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Inicializar captura de logs
INSTALL_LOG=""
ERROR_LOG=""
INSTALL_STATUS="success"

# Função para logging
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] $message"
    echo -e "${GREEN}$log_entry${NC}"
    INSTALL_LOG+="$log_entry\n"
}

error() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local error_entry="[$timestamp] ERROR: $message"
    echo -e "${RED}$error_entry${NC}"
    ERROR_LOG+="$error_entry\n"
    INSTALL_STATUS="error"
}

warning() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local warning_entry="[$timestamp] WARNING: $message"
    echo -e "${YELLOW}$warning_entry${NC}"
    INSTALL_LOG+="$warning_entry\n"
}

# Função para enviar webhook final
send_final_webhook() {
    local final_status="$1"
    local final_message="$2"
    
    # Escapar caracteres especiais para JSON
    local escaped_install_log=$(echo -e "$INSTALL_LOG" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/g' | tr -d '\n')
    local escaped_error_log=$(echo -e "$ERROR_LOG" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/g' | tr -d '\n')
    
    # Preparar os dados para o webhook
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local hostname=$(hostname)
    local server_ip=$(hostname -I | awk '{print $1}')
    
    # Criar objeto JSON para o webhook com todos os dados
    local WEBHOOK_DATA=$(cat << EOF
{
  "installation_id": "${INSTALLATION_ID}",
  "timestamp": "${timestamp}",
  "hostname": "${hostname}",
  "server_ip": "${server_ip}",
  "status": "${final_status}",
  "message": "${final_message}",
  "install_log": "${escaped_install_log}",
  "error_log": "${escaped_error_log}",
  "domain": "${DOMAIN}",
  "portainer": {
    "url": "https://${PORTAINER_DOMAIN}",
    "username": "admin",
    "password": "${PORTAINER_PASSWORD}"
  },
  "traefik": {
    "url": "https://${TRAEFIK_DOMAIN}",
    "username": "admin",
    "password": "${TRAEFIK_PASSWORD}"
  },
  "n8n": {
    "editor_url": "https://${N8N_EDITOR_DOMAIN}",
    "webhook_url": "https://${N8N_WEBHOOK_DOMAIN}",
    "encryption_key": "${N8N_ENCRYPTION_KEY}",
    "suggested_password": "${N8N_SUGGESTED_PASSWORD}"
  },
  "evolution": {
    "url": "https://${EVOLUTION_DOMAIN}",
    "api_key": "${EVOLUTION_API_KEY}",
    "manager_url": "https://${EVOLUTION_DOMAIN}/manager"
  }
}
EOF
)

    # Enviar dados para o webhook
    log "Enviando dados da instalação para o webhook..."
    local WEBHOOK_RESPONSE=$(curl -s -X POST "${WEBHOOK_URL}" \
      -H "Content-Type: application/json" \
      -d "${WEBHOOK_DATA}" \
      -w "\n%{http_code}")

    local HTTP_CODE=$(echo "$WEBHOOK_RESPONSE" | tail -n1)
    local WEBHOOK_BODY=$(echo "$WEBHOOK_RESPONSE" | sed '$d')

    if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 202 ]; then
        log "Dados enviados com sucesso para o webhook."
    else
        error "Não foi possível enviar os dados para o webhook. Código HTTP: ${HTTP_CODE}. Resposta: ${WEBHOOK_BODY}"
    fi
}

# Função para tratamento de erro e saída
error_exit() {
    error "$1"
    send_final_webhook "error" "$1"
    exit 1
}

# Verificar parâmetros
if [ $# -lt 6 ]; then
    error_exit "Uso: $0 DOMAIN PORTAINER_SUBDOMAIN N8N_EDITOR_SUBDOMAIN N8N_WEBHOOK_SUBDOMAIN EVOLUTION_SUBDOMAIN WEBHOOK_URL [PORTAINER_PASSWORD]"
fi

DOMAIN=$1
PORTAINER_SUBDOMAIN=$2
N8N_EDITOR_SUBDOMAIN=$3
N8N_WEBHOOK_SUBDOMAIN=$4
EVOLUTION_SUBDOMAIN=$5
WEBHOOK_URL=$6
PORTAINER_PASSWORD=${7:-$(openssl rand -hex 16)}

# Gerar ID único para esta instalação
INSTALLATION_ID=$(openssl rand -hex 8)

# Construir domínios completos
PORTAINER_DOMAIN="${PORTAINER_SUBDOMAIN}.${DOMAIN}"
N8N_EDITOR_DOMAIN="${N8N_EDITOR_SUBDOMAIN}.${DOMAIN}"
N8N_WEBHOOK_DOMAIN="${N8N_WEBHOOK_SUBDOMAIN}.${DOMAIN}"
EVOLUTION_DOMAIN="${EVOLUTION_SUBDOMAIN}.${DOMAIN}"
TRAEFIK_DOMAIN="traefik.${DOMAIN}"

log "=== INICIANDO INSTALAÇÃO COMPLETA DO SERVIDOR ==="
log "Domínio principal: ${DOMAIN}"
log "Portainer: https://${PORTAINER_DOMAIN}"
log "N8N Editor: https://${N8N_EDITOR_DOMAIN}"
log "N8N Webhook: https://${N8N_WEBHOOK_DOMAIN}"
log "Evolution: https://${EVOLUTION_DOMAIN}"
log "Traefik Dashboard: https://${TRAEFIK_DOMAIN}"
log "Installation ID: ${INSTALLATION_ID}"

# LIMPEZA INICIAL - Garantir que não há processos travados
log "Verificando processos em execução..."
killall apt apt-get dpkg unattended-upgrades 2>/dev/null || true
sleep 5

# ==============================================================================
# ETAPA 1: ATUALIZANDO SISTEMA
# ==============================================================================
log "=== ETAPA 1: ATUALIZANDO SISTEMA ==="
export DEBIAN_FRONTEND=noninteractive
apt-get update -qq
apt-get upgrade -y -qq
apt-get install -y -qq apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common jq openssl wget apache2-utils

# ==============================================================================
# ETAPA 2: INSTALANDO DOCKER
# ==============================================================================
log "=== ETAPA 2: INSTALANDO DOCKER ==="
apt-get remove -y -qq docker docker-engine docker.io containerd runc 2>/dev/null || true
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update -qq
apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-compose-plugin
systemctl start docker && systemctl enable docker
if ! docker --version > /dev/null 2>&1; then error_exit "Falha na instalação do Docker"; fi
log "Docker instalado com sucesso: $(docker --version)"

# ==============================================================================
# ETAPA 3: LIMPEZA DO AMBIENTE DOCKER
# ==============================================================================
log "=== ETAPA 3: REMOVENDO STACKS E VOLUMES ANTERIORES ==="
log "Limpando instalações anteriores para garantir um ambiente limpo..."
docker stack rm portainer traefik n8n n8n_redis n8n_postgres evolution evolution_redis evolution_postgres 2>/dev/null || true
log "Aguardando a remoção completa das stacks..."
sleep 15
# Limpar também os volumes para garantir que as senhas do PG sejam novas
docker volume rm $(docker volume ls -q | grep -E "n8n|evolution|portainer|traefik") 2>/dev/null || true
log "Volumes antigos removidos."

# ==============================================================================
# ETAPA 4: CONFIGURANDO DOCKER SWARM
# ==============================================================================
log "=== ETAPA 4: CONFIGURANDO DOCKER SWARM ==="
docker swarm leave --force 2>/dev/null || true
sleep 2
SERVER_IP=$(ip route get 1.1.1.1 | awk '{print $7}')
if docker swarm init --advertise-addr $SERVER_IP; then log "Docker Swarm inicializado com sucesso"; else error_exit "Falha ao inicializar Docker Swarm"; fi
log "Docker Swarm configurado e operacional"

# ==============================================================================
# ETAPA 5: CRIANDO REDES E GERANDO CREDENCIAIS
# ==============================================================================
log "=== ETAPA 5: CRIANDO REDES E GERANDO CREDENCIAIS ==="
docker network create --driver overlay --attachable proxy 2>/dev/null || log "Rede proxy já existe"
docker network create --driver overlay --attachable GrowthNet 2>/dev/null || log "Rede GrowthNet já existe"

TRAEFIK_USER="admin"
TRAEFIK_PASSWORD=$(openssl rand -hex 16)
TRAEFIK_HASHED_PASSWORD=$(htpasswd -nbB ${TRAEFIK_USER} ${TRAEFIK_PASSWORD})
ESCAPED_TRAEFIK_HASH=$(echo "${TRAEFIK_HASHED_PASSWORD}" | sed 's/\$/\$\$/g')
N8N_ENCRYPTION_KEY=$(openssl rand -hex 16)
N8N_SUGGESTED_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 12 | head -n 1)
EVOLUTION_API_KEY=$(openssl rand -hex 16)
N8N_POSTGRES_PASSWORD=$(openssl rand -hex 16)
EVOLUTION_POSTGRES_PASSWORD=$(openssl rand -hex 16)
log "Todas as credenciais foram geradas."

# ==============================================================================
# ETAPA 6: INSTALANDO INFRAESTRUTURA (TRAEFIK & PORTAINER)
# ==============================================================================
log "=== ETAPA 6: INSTALANDO TRAEFIK ==="
docker volume create traefik_data 2>/dev/null || true
mkdir -p /opt/traefik
cat > /opt/traefik/docker-compose.yml << EOF
version: '3.7'
services:
  traefik:
    image: traefik:v2.10
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencryptresolver.acme.httpchallenge=true
      - --certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencryptresolver.acme.email=admin@${DOMAIN}
      - --certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_data:/letsencrypt"
    networks:
      - "proxy"
    deploy:
      mode: global
      placement:
        constraints:
          - "node.role == manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik-dashboard.rule=Host(\`${TRAEFIK_DOMAIN}\`)"
        - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
        - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencryptresolver"
        - "traefik.http.routers.traefik-dashboard.service=api@internal"
        - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
        - "traefik.http.middlewares.traefik-auth.basicauth.users=${ESCAPED_TRAEFIK_HASH}"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.routers.redirect-https.rule=hostregexp(\`{host:.+}\`)"
        - "traefik.http.routers.redirect-https.entrypoints=web"
        - "traefik.http.routers.redirect-https.middlewares=redirect-to-https"
volumes:
  traefik_data:
    external: true
networks:
  proxy:
    external: true
    name: proxy
EOF
log "Fazendo deploy do Traefik via Docker..."
docker stack deploy -c /opt/traefik/docker-compose.yml traefik

log "=== ETAPA 7: INSTALANDO PORTAINER ==="
docker volume create portainer_data 2>/dev/null || true
mkdir -p /opt/portainer
cat > /opt/portainer/docker-compose.yml << EOF
version: '3.7'
services:
  portainer:
    image: portainer/portainer-ce:latest
    command: --host=unix:///var/run/docker.sock --logo="https://www.growthtap.com.br/logo.png"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
      - "/opt:/opt"
    networks:
      - "proxy"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=proxy"
        - "traefik.http.routers.portainer.rule=Host(\`${PORTAINER_DOMAIN}\`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
volumes:
  portainer_data:
    external: true
networks:
  proxy:
    external: true
    name: proxy
EOF
log "Fazendo deploy do Portainer via Docker..."
docker stack deploy -c /opt/portainer/docker-compose.yml portainer
log "Aguardando infraestrutura (Traefik e Portainer) inicializar e obter SSL..."
sleep 60

# ==============================================================================
# ETAPA 8: CONFIGURAR SENHA E OBTER TOKEN DA API PORTAINER
# ==============================================================================
log "=== ETAPA 8: CONFIGURANDO PORTAINER E API ==="
log "Configurando senha administrativa do Portainer..."
for i in {1..10}; do
    SETUP_RESPONSE=$(curl -s -k -X POST "https://${PORTAINER_DOMAIN}/api/users/admin/init" -H "Content-Type: application/json" -d "{\"Username\":\"admin\",\"Password\":\"${PORTAINER_PASSWORD}\"}" -w "%{http_code}" -o /dev/null)
    if [ "$SETUP_RESPONSE" = "200" ] || [ "$SETUP_RESPONSE" = "409" ]; then log "Senha do Portainer configurada com sucesso"; break; else log "Tentativa $i/10 de configuração da senha... (HTTP: $SETUP_RESPONSE)"; sleep 10; fi
    if [ $i -eq 10 ]; then error_exit "Não foi possível configurar senha do Portainer via API."; fi
done

log "Obtendo token de autenticação (JWT) do Portainer..."
for i in {1..5}; do
    AUTH_RESPONSE=$(curl -s -k -X POST "https://${PORTAINER_DOMAIN}/api/auth" -H "Content-Type: application/json" -d "{\"username\":\"admin\",\"password\":\"${PORTAINER_PASSWORD}\"}")
    PORTAINER_JWT=$(echo $AUTH_RESPONSE | jq -r .jwt)
    if [ "$PORTAINER_JWT" != "null" ]; then log "Token JWT obtido com sucesso."; break; else log "Tentativa $i/5 para obter token..."; sleep 5; fi
    if [ $i -eq 5 ]; then error_exit "Não foi possível obter o token de autenticação do Portainer."; fi
done

log "Obtendo ID do endpoint do Swarm..."
for i in {1..5}; do
    PORTAINER_ENDPOINT_ID=$(curl -s -k -X GET "https://${PORTAINER_DOMAIN}/api/endpoints" -H "Authorization: Bearer ${PORTAINER_JWT}" | jq '.[0].Id')
    if [ -n "$PORTAINER_ENDPOINT_ID" ] && [ "$PORTAINER_ENDPOINT_ID" != "null" ]; then log "Endpoint ID encontrado: ${PORTAINER_ENDPOINT_ID}"; break; else log "Tentativa $i/5 para obter endpoint ID..."; sleep 5; fi
    if [ $i -eq 5 ]; then error_exit "Não foi possível obter o Endpoint ID do Portainer."; fi
done

# ==============================================================================
# FUNÇÃO: DEPLOY DE STACKS VIA API DO PORTAINER
# ==============================================================================
deploy_stack_via_portainer() {
    local stack_name="$1"
    local compose_file_path="$2"
    
    log "Fazendo deploy da stack '${stack_name}' via API do Portainer..."

    local stack_content
    stack_content=$(cat "${compose_file_path}")
    local swarm_id
    swarm_id=$(docker info --format '{{.Swarm.Cluster.ID}}')

    # Usar jq para construir o payload JSON de forma segura e compacta
    local json_payload
    json_payload=$(jq -cn \
      --arg name "$stack_name" \
      --arg swarm_id "$swarm_id" \
      --arg content "$stack_content" \
      '{Name: $name, SwarmID: $swarm_id, StackFileContent: $content, Env: []}')

    # Fazer a chamada API com o payload pré-construído
    API_RESPONSE=$(curl -s -k -X POST \
        "https://${PORTAINER_DOMAIN}/api/stacks?type=1&method=string&endpointId=${PORTAINER_ENDPOINT_ID}" \
        -H "Authorization: Bearer ${PORTAINER_JWT}" \
        -H "Content-Type: application/json" \
        -d "${json_payload}")
    
    if echo "${API_RESPONSE}" | jq -e .Id > /dev/null; then
        log "✓ Deploy da stack '${stack_name}' iniciado com sucesso."
    else
        error "Falha no deploy da stack '${stack_name}'."
        error "Payload enviado: ${json_payload}"
        error "Resposta da API: ${API_RESPONSE}"
    fi
}
# ==============================================================================

# ETAPA 9: PREPARAR E DEPLOYAR N8N
log "=== ETAPA 9: DEPLOYANDO N8N VIA API ==="
docker volume create n8n_data 2>/dev/null || true
docker volume create n8n_postgres_data 2>/dev/null || true
docker volume create n8n_redis_data 2>/dev/null || true
mkdir -p /opt/n8n
cat > /opt/n8n/n8n_redis.yaml << EOF
version: '3.7'
services:
  redis:
    image: redis:latest
    command: redis-server --appendonly yes
    volumes:
      - n8n_redis_data:/data
    networks:
      - GrowthNet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
volumes:
  n8n_redis_data:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
EOF
cat > /opt/n8n/n8n_postgres.yaml << EOF
version: '3.7'
services:
  postgres:
    image: postgres:13
    environment:
      - "POSTGRES_PASSWORD=${N8N_POSTGRES_PASSWORD}"
      - "POSTGRES_USER=postgres"
      - "POSTGRES_DB=n8n_queue"
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
    networks:
      - GrowthNet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
volumes:
  n8n_postgres_data:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
EOF
cat > /opt/n8n/n8n.yaml << EOF
version: "3.7"
services:
  n8n_editor:
    image: n8nio/n8n:latest
    command: start
    networks:
      - GrowthNet
      - proxy
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n_queue
      DB_POSTGRESDB_HOST: n8n_postgres_postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: "${N8N_POSTGRES_PASSWORD}"
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
      N8N_HOST: "${N8N_EDITOR_DOMAIN}"
      N8N_EDITOR_BASE_URL: "https://${N8N_EDITOR_DOMAIN}/"
      WEBHOOK_URL: "https://${N8N_WEBHOOK_DOMAIN}/"
      N8N_PROTOCOL: https
      N8N_PORT: 5678
      NODE_ENV: production
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: n8n_redis_redis
      QUEUE_BULL_REDIS_PORT: 6379
      GENERIC_TIMEZONE: America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=proxy"
        - "traefik.http.routers.n8n.rule=Host(\`${N8N_EDITOR_DOMAIN}\`)"
        - "traefik.http.routers.n8n.entrypoints=websecure"
        - "traefik.http.routers.n8n.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.n8n.loadbalancer.server.port=5678"
  n8n_webhook:
    image: n8nio/n8n:latest
    command: webhook
    networks:
      - GrowthNet
      - proxy
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n_queue
      DB_POSTGRESDB_HOST: n8n_postgres_postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: "${N8N_POSTGRES_PASSWORD}"
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
      N8N_HOST: "${N8N_EDITOR_DOMAIN}"
      N8N_EDITOR_BASE_URL: "https://${N8N_EDITOR_DOMAIN}/"
      WEBHOOK_URL: "https://${N8N_WEBHOOK_DOMAIN}/"
      N8N_PROTOCOL: https
      N8N_PORT: 5678
      NODE_ENV: production
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: n8n_redis_redis
      QUEUE_BULL_REDIS_PORT: 6379
      GENERIC_TIMEZONE: America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=proxy"
        - "traefik.http.routers.n8n_webhook.rule=Host(\`${N8N_WEBHOOK_DOMAIN}\`)"
        - "traefik.http.routers.n8n_webhook.entrypoints=websecure"
        - "traefik.http.routers.n8n_webhook.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.n8n_webhook.loadbalancer.server.port=5678"
  n8n_worker:
    image: n8nio/n8n:latest
    command: worker --concurrency=10
    networks:
      - GrowthNet
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: n8n_queue
      DB_POSTGRESDB_HOST: n8n_postgres_postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: "${N8N_POSTGRES_PASSWORD}"
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: n8n_redis_redis
      QUEUE_BULL_REDIS_PORT: 6379
      GENERIC_TIMEZONE: America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
volumes:
  n8n_data:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
  proxy:
    external: true
    name: proxy
EOF
deploy_stack_via_portainer "n8n_redis" "/opt/n8n/n8n_redis.yaml"
deploy_stack_via_portainer "n8n_postgres" "/opt/n8n/n8n_postgres.yaml"
log "Aguardando dependências do N8N..."
sleep 15
deploy_stack_via_portainer "n8n" "/opt/n8n/n8n.yaml"

# ETAPA 10: PREPARAR E DEPLOYAR EVOLUTION
log "=== ETAPA 10: DEPLOYANDO EVOLUTION VIA API ==="
docker volume create evolution_redis_data 2>/dev/null || true
docker volume create evolution_postgres_data 2>/dev/null || true
docker volume create evolution_instances 2>/dev/null || true
mkdir -p /opt/evolution
cat > /opt/evolution/evolution_redis.yaml << EOF
version: '3.7'
services:
  redis:
    image: redis:latest
    command: redis-server --appendonly yes
    volumes:
      - evolution_redis_data:/data
    networks:
      - GrowthNet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
volumes:
  evolution_redis_data:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
EOF
cat > /opt/evolution/evolution_postgres.yaml << EOF
version: '3.7'
services:
  postgres:
    image: postgres:13
    environment:
      - "POSTGRES_PASSWORD=${EVOLUTION_POSTGRES_PASSWORD}"
      - "POSTGRES_USER=postgres"
    volumes:
      - evolution_postgres_data:/var/lib/postgresql/data
    networks:
      - GrowthNet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
volumes:
  evolution_postgres_data:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
EOF
cat > /opt/evolution/evolution.yaml << EOF
version: '3.7'
services:
  evolution:
    image: atendai/evolution-api:latest
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - GrowthNet
      - proxy
    environment:
      SERVER_URL: "https://${EVOLUTION_DOMAIN}"
      AUTHENTICATION_API_KEY: "${EVOLUTION_API_KEY}"
      DATABASE_ENABLED: "true"
      DATABASE_PROVIDER: postgresql
      DATABASE_CONNECTION_URI: "postgresql://postgres:${EVOLUTION_POSTGRES_PASSWORD}@evolution_postgres_postgres:5432/evolution"
      CACHE_REDIS_ENABLED: "true"
      CACHE_REDIS_URI: "redis://evolution_redis_redis:6379/8"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=proxy"
        - "traefik.http.routers.evolution.rule=Host(\`${EVOLUTION_DOMAIN}\`)"
        - "traefik.http.routers.evolution.entrypoints=websecure"
        - "traefik.http.routers.evolution.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.evolution.loadbalancer.server.port=8080"
volumes:
  evolution_instances:
    external: true
networks:
  GrowthNet:
    external: true
    name: GrowthNet
  proxy:
    external: true
    name: proxy
EOF
deploy_stack_via_portainer "evolution_redis" "/opt/evolution/evolution_redis.yaml"
deploy_stack_via_portainer "evolution_postgres" "/opt/evolution/evolution_postgres.yaml"
log "Aguardando dependências da Evolution..."
sleep 15
deploy_stack_via_portainer "evolution" "/opt/evolution/evolution.yaml"

# ETAPA 11: FINALIZAÇÃO
log "=== ETAPA 11: FINALIZANDO A INSTALAÇÃO ==="
log "Aguardando todos os serviços inicializarem..."
sleep 60

CREDENTIALS_DIR="/root/.credentials"
mkdir -p "$CREDENTIALS_DIR"
cat > "${CREDENTIALS_DIR}/server_complete.txt" << EOF
=== INSTALAÇÃO COMPLETA DO SERVIDOR ===
Data: $(date)
Domain: ${DOMAIN}
Installation ID: ${INSTALLATION_ID}

=== TRAEFIK DASHBOARD ===
URL: https://${TRAEFIK_DOMAIN}
Username: ${TRAEFIK_USER}
Password: ${TRAEFIK_PASSWORD}

=== PORTAINER ===
URL: https://${PORTAINER_DOMAIN}
Username: admin
Password: ${PORTAINER_PASSWORD}

=== N8N ===
Editor URL: https://${N8N_EDITOR_DOMAIN}
Webhook URL: https://${N8N_WEBHOOK_DOMAIN}
Senha sugerida: ${N8N_SUGGESTED_PASSWORD}
Encryption Key: ${N8N_ENCRYPTION_KEY}

=== EVOLUTION API ===
URL: https://${EVOLUTION_DOMAIN}
Manager: https://${EVOLUTION_DOMAIN}/manager
API Key: ${EVOLUTION_API_KEY}
EOF
chmod 600 "${CREDENTIALS_DIR}/server_complete.txt"
log "Credenciais salvas em ${CREDENTIALS_DIR}/server_complete.txt"

# Limpeza final
apt-get autoremove -y -qq && apt-get autoclean -qq

log "=== INSTALAÇÃO CONCLUÍDA COM SUCESSO ==="
echo "=================================================="
echo "        INSTALAÇÃO COMPLETA FINALIZADA"
echo "=================================================="
echo "Acesse o Portainer em https://${PORTAINER_DOMAIN} para ver suas stacks com controle total."
echo "Credenciais foram salvas em ${CREDENTIALS_DIR}/server_complete.txt"
echo "=================================================="

send_final_webhook "success" "Instalação completa do servidor finalizada com sucesso via API do Portainer."
log "Webhook de conclusão enviado. Instalação finalizada!"
exit 0

